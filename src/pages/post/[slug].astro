---
import shiki, { BUNDLED_LANGUAGES } from "shiki";
import Layout from "@layouts/Layout.astro";
import { ghostClient } from "@lib/ghost";
import { getPostSlug } from "@lib/post";
import { RECRUIT_URL } from "src/constants";
import PostLink from "@components/PostLink.astro";
import dayjs from "dayjs";

export async function getStaticPaths() {
  const posts = await ghostClient.posts.browse({
    limit: "all",
    include: "authors",
    fields:
      "id,title,reading_time,feature_image,title,html,slug,primary_author,published_at,excerpt",
  });

  const highlighter = await shiki.getHighlighter({
    theme: "github-dark",
    langs: [
      "shell",
      "javascript",
      "yaml",
      "dart",
      "swift",
      "java",
      "sql",
      "json",
      "jsx",
      "php",
    ],
  });

  const paths = [];

  for await (const post of posts) {
    const matches = post.html.matchAll(
      /(?<block><pre><code class="language-(?<lang>.+?)">(?<code>[\s\S]*?)<\/code><\/pre>)/g
    );

    for await (const match of [...matches]) {
      const originalCode = match.groups.code;
      let lang = match.groups.lang.toLowerCase() as shiki.Lang;
      if (!originalCode || !lang) {
        return;
      }
      if (!highlighter.getLoadedLanguages().includes(lang)) {
        if (lang === "bash") {
          lang = "shell";
        }
        await highlighter.loadLanguage(lang);
      }
      const block = match.groups.block;
      const replacedCode = originalCode
        .replace(/&lt;/g, "<")
        .replace(/&gt;/g, ">");
      post.html = post.html.replace(
        block,
        highlighter.codeToHtml(replacedCode, { lang })
      );
    }

    post.published_at = dayjs(post.published_at).format("YYYY.MM.DD");

    paths.push({
      params: {
        slug: getPostSlug(post),
      },
      props: {
        post: post,
        previousPost: posts[posts.indexOf(post) + 1],
        nextPost: posts[posts.indexOf(post) - 1],
      },
    });
  }

  return paths;
}

const { post, previousPost, nextPost } = Astro.props;
---

<Layout title={post.title}>
  <Fragment slot="head">
    <meta name="author" content={post.primary_author.name} />
    <meta name="description" content={post.excerpt} />
    <meta property="og:title" content={post.title} />
    <meta property="og:description" content={post.excerpt} />
    <meta property="og:type" content="article" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:image" content={post.feature_image} />
    <link rel="preload" as="image" href={post.feature_image} />
  </Fragment>
  <article
    class="col-span-12 lg:col-span-8 lg:col-start-3 pt-10 lg:pt-[80px] max-w-3xl mx-auto"
    transition:animate="initial"
  >
    <h1 class="text-3xl font-semibold mb-8">{post.title}</h1>
    <div class="flex items-center gap-3">
      <p class="flex items-center text-gray-600 text-sm">
        <img
          src={post.primary_author.profile_image}
          width="52"
          height="52"
          alt={`${post.primary_author.name} 프로필 이미지`}
          class="rounded-full"
        />
      </p>
      <div>
        <strong>{post.primary_author.name}</strong>
        <div class="flex items-center text-gray-400 text-sm gap-1">
          <p>{post.published_at}</p>
          <p>•</p>
          <p>
            {post.reading_time} min read
          </p>
        </div>
      </div>
    </div>
    <img
      class="mt-16 w-full"
      src={post.feature_image}
      alt={post.title}
      width="752"
      height="499"
      transition:name={`feature-image-${post.id}`}
    />
    <article
      class="prose lg:prose-lg mt-16"
      transition:name={`content-${post.id}`}
    >
      <Fragment set:html={post.html} />
      <div class="mt-16">
        <hr />
        <p>
          커리어의 성장을 돕는 코멘토에서 언제나 <strong
            >함께 성장할 개발자</strong
          >를 기다리고 있습니다. <a href={RECRUIT_URL} target="_blank"
            >채용 페이지</a
          >에서 코멘토가 어떤 회사인지, 어떤 사람을 찾는지 더 자세히
          확인해보세요. 😊
        </p>
        <div class="flex justify-center">
          <a href={RECRUIT_URL} target="_blank">
            <button
              class="border py-2 px-4 rounded-lg text-base border-primary text-primary hover:bg-primary hover:text-white"
              >채용 공고 확인하기</button
            >
          </a>
        </div>
      </div>
    </article>
  </article>
  <nav
    class="flex flex-col gap-4 md:flex-row justify-between col-span-12 lg:col-span-8 lg:col-start-3 mt-4 mb-10 lg:mb-[80px]"
  >
    {
      previousPost ? (
        <PostLink class="order-2 md:order-none" post={previousPost} />
      ) : (
        <div />
      )
    }
    {
      nextPost && (
        <PostLink
          class="order-1 md:order-none"
          post={nextPost}
          direction="right"
        />
      )
    }
  </nav>
</Layout>
